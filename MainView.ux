<App Theme="Basic">
  <Font File="Assets/Roboto-Black.ttf" ux:Global="Black" />
  <JavaScript File="lodash.js" ux:Global="lodash" />
  <JavaScript>
    var Observable = require('FuseJS/Observable');
    var _ = require('lodash');

    function Cell(x, y) {
      this.state = Observable("closed");
      this.x = x;
      this.y = y;
      this.hasMine = false;
      this.mineRadar = 0;
      this.isOpen = false;
    }

    function Board(width, height, numberOfMines) {
      this.width = Observable(width);
      this.height = Observable(height);
      this.numberOfMines = numberOfMines;
      this.cells = Observable();
      this.initBoard();
      this.placeMines();
      this.updateMineRadar();
    }

    Board.prototype = {
      restartGame: function(width, height, numberOfMines) {
        this.width.value = width;
        this.height.value = height;
        this.numberOfMines = numberOfMines;
        this.opensLeftToWin = width * height - numberOfMines;
        this.initBoard();
        this.placeMines();
        this.updateMineRadar();
        console.log("---------------------------------");
        console.log(this.toString());
      },
      initBoard: function() {
        var self = this;
        var cells = [];
        self.iterateCells(function(cell, x, y) {
          cells.push(new Cell(x, y));
        });
        self.cells.replaceAll(cells);
      },
      placeMines: function() {
        var minesLeft = this.numberOfMines;
        while( minesLeft>0 ) {
          var ix = Math.floor(Math.random()*this.width.value*this.height.value);
          if( !this.cells.getAt(ix).hasMine ) {
            this.cells.getAt(ix).hasMine = true;
            minesLeft--;
          }
        }
      },
      minesAt: function(x, y) {
        var cell = this.cellAt(x, y);
        if( !cell ) return 0;
        return cell.hasMine ? 1 : 0;
      },
      cellAt: function(x, y) {
        if( x>=0 && y>=0 && x<this.width.value && y<this.height.value ) {
          var ix = this.width.value*y + x;
          return this.cells.getAt(ix);
        }
        // point is outside grid
        return null;
      },
      updateMineRadar: function() {
        var self = this;
        self.iterateCells(function(cell, x, y) {
          cell.mineRadar = 
            self.minesAt(x-1, y-1) + self.minesAt(x, y-1) + self.minesAt(x+1, y-1) +
            self.minesAt(x-1, y  ) + self.minesAt(x, y  ) + self.minesAt(x+1, y  ) +
            self.minesAt(x-1, y+1) + self.minesAt(x, y+1) + self.minesAt(x+1, y+1);
        });
      },
      cellClicked: function(cell) {
        if( cell.hasMine ) {
          cell.state.value = "mine";
        } else {
          this.recursiveOpen(cell.x, cell.y);
        }
      },
      recursiveOpen: function(x, y) {
        var cell = this.cellAt(x, y);
        if( !cell ) return;

        if( cell.state.value != 'closed' ) return;

        cell.state.value = cell.mineRadar==0 ? "minesFarAway" : "minesNear";
        if( --this.opensLeftToWin == 0 ) this.celebrateVictory();

        if( cell.mineRadar == 0 ) {
          this.recursiveOpen(x-1, y-1);
          this.recursiveOpen(x  , y-1);
          this.recursiveOpen(x+1, y-1);

          this.recursiveOpen(x-1, y);
          this.recursiveOpen(x+1, y);

          this.recursiveOpen(x-1, y+1);
          this.recursiveOpen(x  , y+1);
          this.recursiveOpen(x+1, y+1);
        }
      },
      celebrateVictory: function() {
        console.log("YOU WON!");
      },
      iterateCells: function(callback) {
        var self = this;
        _.times(self.height.value, function(y) {
          _.times(self.width.value, function(x) {
            var cell = self.cellAt(x, y);
            callback.call(self, cell, x, y);
          });
        });
      },
      toString: function() {
        var self = this;
        var string = "";
        this.iterateCells(function(cell, x, y) {
            if( x==0 && y>0 ) string += "\n";
            string += "["+ (cell.hasMine?'*':' ') +cell.mineRadar +"]";
        });
        return string;
      }
    };


    var board = new Board(8, 8, 8);

    function cellClicked(item) {
      board.cellClicked(item.data);
    }



    module.exports = {
      cellClicked: cellClicked,
      board: board,
      bigGameClicked: function() {
        board.restartGame(8, 8, 8);
      },
      smallGameClicked: function() {
        board.restartGame(5,5,5);
      },
    };

  </JavaScript>

<StackPanel>

  <Grid Alignment="Center" ColumnCount="{board.width}" DefaultColumn="auto" Height="500">
    <Each Items="{board.cells}">

      <Panel Width="40" Height="40">
        <Match Value="{state}">
          <Case String="closed">
            <Rectangle Width="30" Height="30" CornerRadius="5" Fill="#808080" Clicked="{cellClicked}">
              <WhilePressed>
                <Scale Factor="0.8"/>
              </WhilePressed>
            </Rectangle>
          </Case>
          <Case String="minesNear">
            <Text Font="Black" TextColor="#606060" TextAlignment="Center" Alignment="Center" Value="{mineRadar}" Width="30" Height="30"/>
          </Case>
          <Case String="minesFarAway">
            <Rectangle Width="30" Height="30" CornerRadius="5" Fill="#F0F0F0"/>
          </Case>
          <Case String="mine">
            <Image File="Assets/mine.png" Width="30">
              <WhileTrue Value="true">
                <Spin Frequency="0.5"/>
                <Scale Factor="1.5"/>
              </WhileTrue>
            </Image>
          </Case>
        </Match>
      </Panel>

    </Each>
  </Grid>

  <Button Text="Small" Clicked="{smallGameClicked}" Height="25"/>
  <Button Text="Big" Clicked="{bigGameClicked}" Height="25"/>
</StackPanel>
</App>
